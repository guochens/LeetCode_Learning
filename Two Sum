Given an array of integers, return indices of the two numbers such that they add up to a specific target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

1.Brute force

class Solution {
    public int[] twoSum(int[] nums, int target) {
        for(int i=0;i<nums.length-1;i++)
        {
            for(int j=i+1;j<nums.length;j++)
            {
                if(nums[i]+nums[j]==target)
                {
                    return new int[] {i,j};
                }    
                //system.out.println([i,j]);
            }
        }
        throw new IllegalArgumentException("No two sum solution");
    }
}

T(n)=O(n^2)
S(n)=O(1)


2.Two-pass Hass Table

class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<nums.length;i++)
        {
            map.put(nums[i],i);
        }
        for(int i=0; i<nums.length;i++)
        {
            int implement = target - nums[i];
            if(map.containsKey(implement) && map.get(implement)!=i)
            {
                return new int[] {i,map.get(implement)};
            }
        }
        throw new IllegalArgumentException("No two sum solution");
    }
}

T(n)=O(n)
S(n)=O(n)

3.one-pass Hass Table

class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<nums.length;i++)
        {
            int implement = target - nums[i];
            if(map.containsKey(implement))
            {
                //return new int[] {i,map.get(implement)};
                return new int[] {map.get(implement),i};
            }
            map.put(nums[i],i);
        }
        throw new IllegalArgumentException("No two sum solution");
    }
}
T(n)=O(n)
S(n)=O(n)

traverse only once
